module "ec2_instance" {
  for_each = var.ec2_instance_parameters
  source  = "terraform-aws-modules/ec2-instance/aws"
  version = "6.1.1"

  ami                                  = try(each.value.ami, var.ec2_instance_defaults.ami, null)
  ami_ssm_parameter                    = try(each.value.ami_ssm_parameter, var.ec2_instance_defaults.ami_ssm_parameter, "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64")
  associate_public_ip_address          = try(each.value.associate_public_ip_address, var.ec2_instance_defaults.associate_public_ip_address, null)
  availability_zone                    = try(each.value.availability_zone, var.ec2_instance_defaults.availability_zone, null)
  capacity_reservation_specification   = try(each.value.capacity_reservation_specification, var.ec2_instance_defaults.capacity_reservation_specification, null)
  cpu_credits                          = try(each.value.cpu_credits, var.ec2_instance_defaults.cpu_credits, null)
  cpu_options                          = try(each.value.cpu_options, var.ec2_instance_defaults.cpu_options, null)
  create                               = try(each.value.create, var.ec2_instance_defaults.create, true)
  create_eip                           = try(each.value.create_eip, var.ec2_instance_defaults.create_eip, false)
  create_iam_instance_profile          = try(each.value.create_iam_instance_profile, var.ec2_instance_defaults.create_iam_instance_profile, false)
  create_security_group                = try(each.value.create_security_group, var.ec2_instance_defaults.create_security_group, true)
  create_spot_instance                 = try(each.value.create_spot_instance, var.ec2_instance_defaults.create_spot_instance, false)
  disable_api_stop                     = try(each.value.disable_api_stop, var.ec2_instance_defaults.disable_api_stop, null)
  disable_api_termination              = try(each.value.disable_api_termination, var.ec2_instance_defaults.disable_api_termination, null)
  ebs_optimized                        = try(each.value.ebs_optimized, var.ec2_instance_defaults.ebs_optimized, null)
  ebs_volumes                          = try(each.value.ebs_volumes, var.ec2_instance_defaults.ebs_volumes, null)
  eip_domain                           = try(each.value.eip_domain, var.ec2_instance_defaults.eip_domain, "vpc")
  eip_tags                             = try(each.value.eip_tags, var.ec2_instance_defaults.eip_tags, {})
  enable_primary_ipv6                  = try(each.value.enable_primary_ipv6, var.ec2_instance_defaults.enable_primary_ipv6, null)
  enable_volume_tags                   = try(each.value.enable_volume_tags, var.ec2_instance_defaults.enable_volume_tags, true)
  enclave_options_enabled              = try(each.value.enclave_options_enabled, var.ec2_instance_defaults.enclave_options_enabled, null)
  ephemeral_block_device               = try(each.value.ephemeral_block_device, var.ec2_instance_defaults.ephemeral_block_device, null)
  get_password_data                    = try(each.value.get_password_data, var.ec2_instance_defaults.get_password_data, null)
  hibernation                          = try(each.value.hibernation, var.ec2_instance_defaults.hibernation, null)
  host_id                              = try(each.value.host_id, var.ec2_instance_defaults.host_id, null)
  host_resource_group_arn              = try(each.value.host_resource_group_arn, var.ec2_instance_defaults.host_resource_group_arn, null)
  iam_instance_profile                 = try(each.value.iam_instance_profile, var.ec2_instance_defaults.iam_instance_profile, null)
  iam_role_description                 = try(each.value.iam_role_description, var.ec2_instance_defaults.iam_role_description, null)
  iam_role_name                        = try(each.value.iam_role_name, var.ec2_instance_defaults.iam_role_name, null)
  iam_role_path                        = try(each.value.iam_role_path, var.ec2_instance_defaults.iam_role_path, null)
  iam_role_permissions_boundary        = try(each.value.iam_role_permissions_boundary, var.ec2_instance_defaults.iam_role_permissions_boundary, null)
  iam_role_policies                    = try(each.value.iam_role_policies, var.ec2_instance_defaults.iam_role_policies, {})
  iam_role_tags                        = try(each.value.iam_role_tags, var.ec2_instance_defaults.iam_role_tags, {})
  iam_role_use_name_prefix             = try(each.value.iam_role_use_name_prefix, var.ec2_instance_defaults.iam_role_use_name_prefix, true)
  ignore_ami_changes                   = try(each.value.ignore_ami_changes, var.ec2_instance_defaults.ignore_ami_changes, false)
  instance_initiated_shutdown_behavior = try(each.value.instance_initiated_shutdown_behavior, var.ec2_instance_defaults.instance_initiated_shutdown_behavior, null)
  instance_market_options              = try(each.value.instance_market_options, var.ec2_instance_defaults.instance_market_options, null)
  instance_tags                        = try(each.value.instance_tags, var.ec2_instance_defaults.instance_tags, {})
  instance_type                        = try(each.value.instance_type, var.ec2_instance_defaults.instance_type, "t3.micro")
  ipv6_address_count                   = try(each.value.ipv6_address_count, var.ec2_instance_defaults.ipv6_address_count, null)
  ipv6_addresses                       = try(each.value.ipv6_addresses, var.ec2_instance_defaults.ipv6_addresses, null)
  key_name                             = try(each.value.key_name, var.ec2_instance_defaults.key_name, null)
  launch_template                      = try(each.value.launch_template, var.ec2_instance_defaults.launch_template, null)
  maintenance_options                  = try(each.value.maintenance_options, var.ec2_instance_defaults.maintenance_options, null)
  metadata_options = try(each.value.metadata_options, var.ec2_instance_defaults.metadata_options, {
    http_endpoint               = "enabled"
    http_put_response_hop_limit = 1
    http_tokens                 = "required"
  })
  monitoring                 = try(each.value.monitoring, var.ec2_instance_defaults.monitoring, null)
  name                       = try(each.value.name, var.ec2_instance_defaults.name, each.key)
  network_interface          = try(each.value.network_interface, var.ec2_instance_defaults.network_interface, null)
  # placement_group            = try(each.value.placement_group, var.ec2_instance_defaults.placement_group, null)
  # placement_partition_number = try(each.value.placement_partition_number, var.ec2_instance_defaults.placement_partition_number, null)
  private_dns_name_options   = try(each.value.private_dns_name_options, var.ec2_instance_defaults.private_dns_name_options, null)
  private_ip                 = try(each.value.private_ip, var.ec2_instance_defaults.private_ip, null)
  putin_khuylo               = try(each.value.putin_khuylo, var.ec2_instance_defaults.putin_khuylo, true)
  region                     = try(each.value.region, var.ec2_instance_defaults.region, null)
  root_block_device          = try(each.value.root_block_device, var.ec2_instance_defaults.root_block_device, null)
  secondary_private_ips      = try(each.value.secondary_private_ips, var.ec2_instance_defaults.secondary_private_ips, null)
  security_group_description = try(each.value.security_group_description, var.ec2_instance_defaults.security_group_description, null)
  security_group_egress_rules = try(each.value.security_group_egress_rules, var.ec2_instance_defaults.security_group_egress_rules, {
    ipv4_default = {
      cidr_ipv4   = "0.0.0.0/0"
      description = "Allow all IPv4 traffic"
      ip_protocol = "-1"
    }
    ipv6_default = {
      cidr_ipv6   = "::/0"
      description = "Allow all IPv6 traffic"
      ip_protocol = "-1"
    }
  })
  security_group_ingress_rules        = try(each.value.security_group_ingress_rules, var.ec2_instance_defaults.security_group_ingress_rules, null)
  security_group_name                 = try(each.value.security_group_name, var.ec2_instance_defaults.security_group_name, null)
  security_group_tags                 = try(each.value.security_group_tags, var.ec2_instance_defaults.security_group_tags, {})
  security_group_use_name_prefix      = try(each.value.security_group_use_name_prefix, var.ec2_instance_defaults.security_group_use_name_prefix, true)
  security_group_vpc_id               = try(each.value.security_group_vpc_id, var.ec2_instance_defaults.security_group_vpc_id, null)
  source_dest_check                   = try(each.value.source_dest_check, var.ec2_instance_defaults.source_dest_check, null)
  spot_instance_interruption_behavior = try(each.value.spot_instance_interruption_behavior, var.ec2_instance_defaults.spot_instance_interruption_behavior, null)
  spot_launch_group                   = try(each.value.spot_launch_group, var.ec2_instance_defaults.spot_launch_group, null)
  spot_price                          = try(each.value.spot_price, var.ec2_instance_defaults.spot_price, null)
  spot_type                           = try(each.value.spot_type, var.ec2_instance_defaults.spot_type, null)
  spot_valid_from                     = try(each.value.spot_valid_from, var.ec2_instance_defaults.spot_valid_from, null)
  spot_valid_until                    = try(each.value.spot_valid_until, var.ec2_instance_defaults.spot_valid_until, null)
  spot_wait_for_fulfillment           = try(each.value.spot_wait_for_fulfillment, var.ec2_instance_defaults.spot_wait_for_fulfillment, null)
  subnet_id                           = try(each.value.subnet_id, var.ec2_instance_defaults.subnet_id, null)
  tenancy                             = try(each.value.tenancy, var.ec2_instance_defaults.tenancy, null)
  timeouts                            = try(each.value.timeouts, var.ec2_instance_defaults.timeouts, {})
  user_data                           = try(each.value.user_data, var.ec2_instance_defaults.user_data, null)
  user_data_base64                    = try(each.value.user_data_base64, var.ec2_instance_defaults.user_data_base64, null)
  user_data_replace_on_change         = try(each.value.user_data_replace_on_change, var.ec2_instance_defaults.user_data_replace_on_change, null)
  volume_tags                         = try(each.value.volume_tags, var.ec2_instance_defaults.volume_tags, merge(local.common_tags, try(each.value.tags, var.ec2_instance_defaults, null)) )
  vpc_security_group_ids              = try(each.value.vpc_security_group_ids, var.ec2_instance_defaults.vpc_security_group_ids, [])

  tags                                = merge(local.common_tags, try(each.value.tags, var.ec2_instance_defaults, null))
}